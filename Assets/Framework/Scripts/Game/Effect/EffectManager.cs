//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System;

using GameDefine;
using Thanos.Tools;
using Thanos.GameData;
using Thanos.GameEntity;
using Thanos;
using Thanos.Skill;
using Thanos.Resource;

namespace Thanos.Effect
{
    //特效显示等级
    public enum EffectLodLevel
    {
        High,
        Low
    }
    //[yaz]特效管理器修改
    public class EffectManager : UnitySingleton<EffectManager>
    {       
        public static Dictionary<Int64, IEffect> m_EffectMap = new Dictionary<Int64, IEffect>();

        //本地特效ID,服务器没传本地生成，负值
        public Int64 localIndex = 0;

        //是否使用缓存特效机制,默认使用
        public bool CachEffect = true;

        //缓存特效时间
        public float CachEffectTime = 10.0f;

        //特效有效距离
        public float ValidDist = 40;


        //特效Lod等级
        public EffectLodLevel mLodLevel = EffectLodLevel.High;

        //缓存特效列表,特效死亡先进入缓存，缓存周期结束进去死亡队列
        //private Dictionary<IEffect.ESkillEffectType, Queue<IEffect>> CachEffectMap = new Dictionary<IEffect.ESkillEffectType, Queue<IEffect>>();

        //死亡特效列表                    
        private List<IEffect> deadEffectList = new List<IEffect>();
        

        public EffectManager()
        {
        }

        //设置特效显示等级
        public void SetEffectLodLevel(EffectLodLevel level)
        {
            mLodLevel = level;
        }

        //检测特效位置是否有效，无效就不创建特效
        public bool CheckEffectValid(Vector3 effectPos, float lifeTime)
        {
            Vector3 localPos = PlayerManager.Instance.LocalPlayer.objTransform.position;

            //计算玩家到特效位置
            float dist = Vector3.Distance(localPos, effectPos);
            if (dist > ValidDist && lifeTime < 1.5f)
                return false;
            else
                return true;
        }


        //屏幕振动
        public void Shakecamera(float period, float offPeriod, int shakeOrient, float shakeTime, float maxWave, float minWave)
        {
            ShakeCamera shakeCamera = Camera.main.GetComponent<ShakeCamera>();
            if (shakeCamera == null)
            {
                shakeCamera = Camera.main.gameObject.AddComponent<ShakeCamera>();                                
            }
            shakeCamera.ShakeScreen((ShakeCamera.ShakeOrient)shakeOrient, period, shakeTime, maxWave, minWave, offPeriod);
        }

        //播放声音
        public virtual void PlayAudio(IEffect effect, string audio, GameObject attachNode)
        {
            StartCoroutine(PlayAudioCoRoutine(effect, audio, attachNode));
        }
        //异步播放声音
        public IEnumerator PlayAudioCoRoutine(IEffect effect, string audio, GameObject attachNode)
        {
            //无效声音名称
            if (audio == "")
            {
                yield break;
            }

            yield return 1;

            ResourceItem clipUnit = ResourcesManager.Instance.loadImmediate(audio, ResourceType.ASSET);
            AudioClip clip = clipUnit.Asset as AudioClip;

            if (clip != null)
            {

                //播放特效绑定的声音
                AudioSource audioSource = AudioManager.Instance.PlayEffectAudio(clip);
                SceneSoundManager.Instance.addSound(audioSource, attachNode);

                effect.mAudioSource = audioSource;
            }
        }
       



        #region 特效创建

        //1.创建被动特效
        public PassitiveEffect CreatePassitiveEffect(IEntity entity, uint typeid, uint projectId)
        {
            SkillPassiveConfigInfo skillinfo = ConfigReader.GetSkillPassiveConfig(typeid);
            //判断资源路径是否有效
            if (skillinfo == null || skillinfo.startEffect == "0")
                return null;

            string resourcePath = GameConstDefine.LoadGameSkillEffectPath + "release/" + skillinfo.startEffect;

            //加载特效信息
            PassitiveEffect effect = new PassitiveEffect();
            effect.entity = entity;
            effect.skillID = typeid;
            effect.projectID = projectId;            
            effect.resPath = resourcePath;

            //创建
            effect.Create();

            //保存到特效列表
            AddEffect(effect.projectID, effect);
            return effect;
        }


        //2.创建buff特效
        public BuffEffect CreateBuffEffect(Player buffEntity, uint buffTypeID, uint instID)
        {
            BuffConfigInfo buffInfo = ConfigReader.GetBuffInfo(buffTypeID);


            //判断是否有后续击飞效果
            if (buffInfo != null && buffInfo.eFlyEffectID != 0)
            {
                //获取击飞信息                
                SkillFlyConfig skillFlycfg = ConfigReader.GetSkillFlyConfig(buffInfo.eFlyEffectID);
                if (skillFlycfg != null && buffEntity != null)
                {
                    //Iplayer player = buffEntity as Iplayer;

                    //被击飞信息
                    string beatFLyAction = skillFlycfg.moveAction;
                    float raiseSpeed = skillFlycfg.raiseSpeed;
                    float raiseAccSpeed = skillFlycfg.raiseAccSpeed;
                    float fallSpeed = skillFlycfg.fallSpeed;
                    float fallAccSpeed = skillFlycfg.fallAccSpeed;
                    float stayTime = skillFlycfg.stayTime;
                    int canbeRecover = skillFlycfg.bIsCanBeRecover;
           
                }
            }

            //判断资源路径是否有效
            if (buffInfo == null || buffInfo.EffectRes == "0")
                return null;

            string resourcePath = GameConstDefine.LoadGameBuffEffectPath + buffInfo.EffectRes;


            //加载特效信息
            BuffEffect effect = new BuffEffect();
            effect.InstID = instID;
            effect.entity = buffEntity;
            effect.projectID = instID;          
            effect.resPath = resourcePath;

            //创建特效
            effect.Create();

            //创建声音
            string soundName = GameConstDefine.LoadGameSoundPath + buffInfo.sound;
            if (buffInfo.sound != "0")
            {
               PlayAudio(effect, soundName, effect.obj);
            }

            //保存特效列表
            AddEffect(effect.projectID, effect);
         
            return effect;
        }


        //3.创建基于时间的特效
        public BeAttackEffect CreateTimeBasedEffect(string res, float time, IEntity entity)
        {
            if (res == "0")
                return null;

            BeAttackEffect effect = new BeAttackEffect();
            //加载特效信息
            effect.skillID = 0;             //技能id=0     
            effect.cehuaTime = time;
            effect.enTargetKey = entity.GameObjGUID;
            effect.resPath = res;           
            //创建
            effect.Create();

            AddEffect(effect.projectID, effect);
            return effect;
        }


        //4.普通追踪特效
        public FlyEffect CreateFlyEffect(UInt64 owner, UInt64 target, uint skillID, uint projectID, Vector3 position, Vector3 direction, bool isAbsorb)
        {               
            SkillEmitConfig skillConfig = ConfigReader.GetSkillEmitCfg(skillID);      
            if (skillConfig == null || skillConfig.effect == "0") return null; //判断资源路径是否有效

            string resourcePath = GameConstDefine.LoadGameSkillEffectPath + "release/" + skillConfig.effect;//攻击特效路径
        
            Player entityOwner, entityTarget;      
            PlayersManager.Instance.PlayerDic.TryGetValue(owner,out entityOwner);//源
            PlayersManager.Instance.PlayerDic.TryGetValue(target,out entityTarget);//目标

            //释放者不能为空
            if (entityOwner == null) return null;
            FlyEffect effect = new FlyEffect();
            effect.enOwnerKey = entityOwner.GameObjGUID;
            if (entityTarget != null)
                effect.enTargetKey = entityTarget.GameObjGUID;

            effect.skillID = skillID;
            effect.fixPosition = position;
            effect.dir = direction;
            effect.isAbsorb = isAbsorb;
            effect.projectID = projectID;
            effect.emitType = skillConfig.emitType;

            //加载特效信息
            effect.cehuaTime = skillConfig.lifeTime;
            effect.resPath = resourcePath;

            //创建
            effect.Create();
            //添加到特效列表中
            AddEffect(effect.projectID, effect);
            return effect;
        }


        //5.普通特效
        public NormalEffect CreateNormalEffect(string res, GameObject parent)
        {
            if (res.EndsWith("/0"))
                return null;

            NormalEffect effect = new NormalEffect();

            //加载特效信息
            effect.Target = parent;
            effect.resPath = res;
          

            //创建
            effect.Create();

            if (effect.obj == null)
            {
                return null;
            }
            AddEffect(effect.projectID, effect);
            return effect;
        }

        public NormalEffect CreateNormalEffect(string res, Vector3 position, Vector3 dir)
        {
            if (res.EndsWith("/0"))
                return null;

            NormalEffect effect = new NormalEffect();

            //加载特效信息
            effect.resPath = res;
            effect.cehuaTime = 0;
            

            //创建
            effect.Create();
            if (effect.obj == null)
            {
                return null;
            }
            effect.obj.transform.position = position;
            effect.obj.transform.rotation = Quaternion.LookRotation(dir);

            AddEffect(effect.projectID, effect);
            return effect;
        }

        //6.创建普通引导特效
        public NormalEffect CreateLeadingEffect(UInt64 owner, UInt32 skillModelID, UInt32 projectid)
        {
            SkillLeadingonfig skillconfig = ConfigReader.GetSkillLeadingConfig(skillModelID);

            //判断路径是否有效
            if (skillconfig == null || skillconfig.effect == "0")
            {
                return null;
            }

            string resourcePath = GameConstDefine.LoadGameSkillEffectPath + "release/" + skillconfig.effect;
            NormalEffect effect = new NormalEffect();

            //加载特效信息
            effect.projectID = projectid;
            effect.NEType = NormalEffect.NormalEffectType.eNE_Leading;            
            effect.resPath = resourcePath;

            IEntity entity = null;
            EntityManager.AllEntitys.TryGetValue(owner, out entity);

            //创建
            if (entity != null)
            {
                effect.Create();
                if (effect.obj == null)
                {
                    return null;
                }
                if (null != entity.RealEntity.objPoint)
                {
                    effect.obj.transform.parent = entity.RealEntity.objPoint.transform;
                    effect.obj.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);
                }
            }

            AddEffect(effect.projectID, effect);
            return effect;
        }

        //7.创建受击特效
        public BeAttackEffect CreateBeAttackEffect(UInt64 owner, UInt64 target, uint skillID)
        {
            SkillAccountConfig skillAccConfig = ConfigReader.GetSkillAccountCfg(skillID);

            //判断是否有后续屏幕振动效果            
            if (skillAccConfig != null && skillAccConfig.cameraId != 0)
            {
                //振动类型1 释放为本机振动  2受机为本机振动
                bool shakeFlag = false;
                if (skillAccConfig.cameraTarget == 1)
                {
                    Player  ownerEntity = null;
                    PlayersManager.Instance.PlayerDic.TryGetValue(owner, out ownerEntity);

                    //if (ownerEntity != null && ownerEntity is Iselfplayer)
                    //{
                        shakeFlag = true;
                    //}                                    
                }
                else if (skillAccConfig.cameraTarget == 2)
                {
                    Player targetEntity = null;
                    //EntityManager.AllEntitys.TryGetValue(target, out targetEntity);
                    PlayersManager.Instance.PlayerDic.TryGetValue(target, out targetEntity);

                    //if (targetEntity != null && targetEntity is Iselfplayer)
                    //{
                        shakeFlag = true;
                    //}                         
                }
                else if (skillAccConfig.cameraTarget == 3)
                {
                    Player ownerEntity = null;
                    Player targetEntity = null;
                    PlayersManager.Instance.PlayerDic.TryGetValue(owner, out ownerEntity);
                    PlayersManager.Instance.PlayerDic.TryGetValue(target, out targetEntity);

                   // if ((ownerEntity != null && ownerEntity is Iselfplayer) || targetEntity != null && targetEntity is Iselfplayer)
                    {
                        shakeFlag = true;
                    }                                                                          
                }

                if (shakeFlag)
                {
                    //获屏幕振动信息                
                    SkillCameraConfig skillCameracfg = ConfigReader.GetSkillCameraConfig(skillAccConfig.cameraId);
                    if (skillCameracfg != null)
                    {
                        //被击飞信息                    
                        float period = skillCameracfg.mPeriod;
                        float offPeriod = skillCameracfg.mOffPeriod;
                        int shakeOrient = skillCameracfg.mShakeOrient;
                        float shakeTime = skillCameracfg.mShakeTime;
                        float maxWave = skillCameracfg.mMaxWave;
                        float minWave = skillCameracfg.mMinWave;

                        Shakecamera(period, offPeriod, shakeOrient, shakeTime, maxWave, minWave);
                    }
                }              
            }


            //判断路径是否有效
            if (skillAccConfig == null || skillAccConfig.effect == "0")
            {
                return null;
            }


            //加载特效信息
            IEntity entityOwner, entityTarget;
            EntityManager.AllEntitys.TryGetValue(owner, out entityOwner);
            EntityManager.AllEntitys.TryGetValue(target, out entityTarget);

            //根据受击特效跟玩家距离判断是否需要创建特效
            if (entityTarget != null)
            {
                if (!CheckEffectValid(entityTarget.objTransform.position, skillAccConfig.lifeTime))
                    return null;
            }

            string resourcePath = GameConstDefine.LoadGameSkillEffectPath + "hit/" + skillAccConfig.effect;
            BeAttackEffect effect = new BeAttackEffect();
       
            if (entityTarget != null)
                effect.enTargetKey = entityTarget.GameObjGUID;

            if (entityOwner == null)
                return null;

            effect.enOwnerKey = entityOwner.GameObjGUID;

            effect.skillID = skillID;            
            effect.resPath = resourcePath;
            effect.cehuaTime = skillAccConfig.lifeTime;

            //创建
            effect.Create();
            //播放声音
            string soundPath = GameConstDefine.LoadGameSoundPath + skillAccConfig.sound;
            if (skillAccConfig.sound != "0")
                PlayAudio(effect, soundPath, effect.obj);

            AddEffect(effect.projectID, effect);
            return effect;
        }


        //8.创建技能范围特效
        public SkillAreaEffect CreateAreaEffect(UInt64 owner, uint skillID, UInt32 projectId, Vector3 skillDir, Vector3 skillPos)
        {
            SkillAreaConfig skillConfig = ConfigReader.GetSkillAreaConfig(skillID);
            //判断路径是否有效
            if (skillConfig == null || skillConfig.effect == "0")
            {
                return null;
            }

            string resourcePath = GameConstDefine.LoadGameSkillEffectPath + "release/" + skillConfig.effect;

            SkillAreaEffect effect = new SkillAreaEffect();

            effect.skillID = skillID;
            effect.dir = skillDir;
            effect.fixPosition = skillPos;
            effect.projectID = projectId;
            

            effect.resPath = resourcePath;
            effect.cehuaTime = skillConfig.lifeTime;

            //创建
            effect.Create();

            //播放声音
            string soundPath = GameConstDefine.LoadGameSoundPath + skillConfig.sound;
                PlayAudio(effect, soundPath, effect.obj);

            AddEffect(effect.projectID, effect);
            return effect;
        }

        #endregion

        //添加特效到EffectMap表
        public void AddEffect(Int64 id, IEffect effect)
        {
            if (!m_EffectMap.ContainsKey(id))
            {
                m_EffectMap.Add(id, effect);
            }
            else
            {
                Debug.LogError("the id: " + id.ToString() + "effect: " + effect.resPath + "has already exsited in EffectManager::AddEffect");
            }
        }

        //获取本地id
        public Int64 GetLocalId()
        {
            return --localIndex;
        }

        //判断特效id是否有效              
        public bool IsValid(Int64 projectid)
        {
            return m_EffectMap.ContainsKey(projectid);
        }

        //根据特效id获取特效
        public IEffect GetEffect(Int64 projectid)
        {
            if (m_EffectMap.ContainsKey(projectid))
            {
                return m_EffectMap[projectid];
            }

            return null;
        }

        //特效系统更新
        public void UpdateSelf()
        {
            deadEffectList.Clear();

            //检查特效是否死亡
            foreach (var effect in m_EffectMap.Values)
            {
                effect.Update();

                //特效死亡 或者绑定Object对象被外部删除
                if (effect.isDead == true || effect.obj == null)
                {
                    deadEffectList.Add(effect);
                }
            }
        }

        //特效系统处理特效删除
        public void HandleDelete()
        {
            foreach (IEffect r in deadEffectList)
            {
                DestroyEffect(r);
            }
        }

        //特效删除
        public void DestroyEffect(Int64 projectID)
        {
            if (m_EffectMap.ContainsKey(projectID))
            {
                DestroyEffect(m_EffectMap[projectID]);
            }
        }

        //特效删除
        public void DestroyEffect(IEffect effect)
        {
            effect.Release();
            m_EffectMap.Remove(effect.projectID);
            effect = null;
        }

        //删除所有特效 
        public void DestroyAllEffect()
        {
            foreach (KeyValuePair<Int64, IEffect> pair in m_EffectMap)
            {
                IEffect effect = pair.Value;
                effect.Release();
                effect = null;
            }
            m_EffectMap.Clear();
        }

        public void Clear()
        {
            m_EffectMap.Clear();
        }

        //播放技能释放声音
        public static void playSkillReleaseSound(IEntity entity, int skillID)
        {
            if (entity == null)
            {
                return;
            }
            SkillManagerConfig skillinfo = ConfigReader.GetSkillManagerCfg(skillID);
            if (skillinfo == null)
            {
                return;
            }
            string soundPath = GameConstDefine.LoadGameSoundPath + skillinfo.rSound;
            ResourceItem objUnit = ResourcesManager.Instance.loadImmediate(soundPath, ResourceType.ASSET);
            AudioClip clip = objUnit.Asset as AudioClip;
            if (clip != null)
            {
                AudioSource Audio = AudioManager.Instance.PlayEffectAudio(clip);
                SceneSoundManager.Instance.addSound(Audio, entity.RealEntity.gameObject);
            }
        }
    }      
}

